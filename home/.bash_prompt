# BASH prompt.

function __git_prompt() {
    local s=""
    local branchName=""

    # check if the current directory is in a git repository
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" $?) == 0 ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then

            # ensure index is up to date
            git update-index --really-refresh -q &>/dev/null

            # check for uncommitted changes in the index
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s="$s+";
            fi

            # check for unstaged changes
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s="$s!";
            fi

            # check for untracked files
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s="$s?";
            fi

            # check for stashed files
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s="$s$";
            fi
        fi

        # get the short symbolic ref
        # if HEAD isn't a symbolic ref, get the short SHA
        # otherwise, just give up
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
                      git rev-parse --short HEAD 2> /dev/null || \
                      printf "(unknown)")"

        [ -n "$s" ] && s=" [$s]"

        printf "%s" "$1$branchName$s"
    else
        return
    fi
}

function __error_prompt() {
  if [[ $? == 0 ]]; then
    printf "${COLOR_RESET}${COLOR_BOLD}[${COLOR_GREEN}^.^${COLOR_RESET}${COLOR_BOLD}]${COLOR_RESET}"
  else
    printf "${COLOR_RESET}${COLOR_BOLD}[${COLOR_RED}O.o${COLOR_RESET}${COLOR_BOLD}]${COLOR_RESET}"
  fi
}

# prompt
PS1="\[${COLOR_RESET}\]\n"
PS1+="\$(__error_prompt)"
PS1+=" \[${COLOR_BOLD}\]\[${COLOR_ORANGE}\]\u\[${COLOR_RESET}\]"
PS1+=" at \[${COLOR_BOLD}\]\[${COLOR_YELLOW}\]\h\[${COLOR_RESET}\]"
PS1+=" in \[${COLOR_BOLD}\]\[${COLOR_GREEN}\]\w\[${COLOR_RESET}\]"
PS1+="\$(__git_prompt \" on \[${COLOR_BOLD}\]\[${COLOR_BLUE}\]\")\[${COLOR_RESET}\]"
PS1+="\n\[${COLOR_BOLD}\]\$ \[${COLOR_RESET}\]"
export PS1

PS2="\[${COLOR_RESET}\]\[${COLOR_BOLD}\]> \[${COLOR_RESET}\]"
export PS2

# sync history in every terminal on every command executed
# http://unix.stackexchange.com/questions/18212/bash-history-ignoredups-and-erasedups-setting-conflict-with-common-history
# NOTE: this is actually very annoying, screws up the up button functionality
# PROMPT_COMMAND="history -n; history -w; history -c; history -r; $PROMPT_COMMAND"
